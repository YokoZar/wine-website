<!--TITLE:[Janitorial Projects]-->

<h1>Janitorial Projects</h1>

  Any self respecting project has a Janitorial project 
  (e.g. <a href="http://janitor.kernelnewbies.org">Kernel 
  Janitor's List</a>), and it's high time that we have one too.
  What is there to clean up? Well, lots of things! :)

  <h2>COM objects</h2>

  <h3>Use Interlocked functions in AddRef and Release methods</h3>

  Most OLE objects should be threadsafe, which requires use of the thread-safe
  increment and decrement functions <tt>InterlockedIncrement(&This->ref)</tt>
  and <tt>InterlockedDecrement(&This->ref)</tt> instead of <tt>This->ref++</tt>
  or <tt>This->ref--</tt>.  See an example
  <a href="http://www.winehq.org/hypermail/wine-patches/2004/09/0248.html">patch</a>
  of how to fix this problem.<p>

  As of Sept 14, 2004), there are at least 32 files that appear to use thread
   unsafe operations:<br>
  <tt>find . -name \*.c -exec grep ef-- {} \; -ls</tt>
  <ul>
    <li>dlls/avifil32/avifile.c
    <li>dlls/oleaut32/tests/vartype.c
    <li>dlls/oleaut32/olefont.c
    <li>dlls/oleaut32/olepicture.c
    <li>dlls/oleaut32/dispatch.c
    <li>dlls/oleaut32/connpt.c
    <li>dlls/dsound/buffer.c
    <li>dlls/ole32/datacache.c
    <li>dlls/ole32/oleobj.c
    <li>dlls/ole32/stg_stream.c
    <li>dlls/ole32/defaulthandler.c
    <li>dlls/ole32/storage.c
    <li>dlls/ole32/storage32.c
    <li>dlls/ole32/hglobalstream.c
    <li>dlls/ole32/antimoniker.c
    <li>dlls/ole32/filemoniker.c
    <li>dlls/ole32/bindctx.c
    <li>dlls/ole32/oleproxy.c
    <li>dlls/ole32/clipboard.c
    <li>dlls/ole32/memlockbytes.c
    <li>dlls/ole32/memlockbytes16.c
    <li>dlls/ole32/itemmoniker.c
    <li>dlls/ole32/moniker.c
    <li>dlls/ole32/compositemoniker.c
    <li>dlls/ole32/marshal.c
    <li>dlls/ole32/rpc.c
    <li>dlls/dinput/mouse.c
    <li>dlls/dinput/joystick_linux.c
    <li>dlls/dinput/device.c
    <li>dlls/dinput/joystick_linuxinput.c
    <li>dlls/dinput/keyboard.c
    <li>dlls/urlmon/umon.c
  </ul>

  <h2>COM objects</h2>

  <h3>Use Interlocked functions in AddRef and Release methods</h3>

  Most OLE objects should be threadsafe, which requires use of the thread-safe
  increment and decrement functions <tt>InterlockedIncrement(&This->ref)</tt>
  and <tt>InterlockedDecrement(&This->ref)</tt> instead of <tt>This->ref++</tt>
  or <tt>This->ref--</tt>.  See an example
  <a href="http://cvs.winehq.org/patch.py?id=13781">patch</a>
  of how to fix this problem.<p>

  As of Sept 14, 2004), there are at least 32 files that appear to use thread
   unsafe operations:<br>
  <tt>find . -name \*.c -exec grep ef-- {} \; -ls</tt>
  <ul>
    <li>dlls/avifil32/avifile.c
    <li>dlls/oleaut32/tests/vartype.c
    <li>dlls/oleaut32/olefont.c
    <li>dlls/oleaut32/olepicture.c
    <li>dlls/oleaut32/dispatch.c
    <li>dlls/oleaut32/connpt.c
    <li>dlls/dsound/buffer.c
    <li>dlls/ole32/datacache.c
    <li>dlls/ole32/oleobj.c
    <li>dlls/ole32/stg_stream.c
    <li>dlls/ole32/defaulthandler.c
    <li>dlls/ole32/storage.c
    <li>dlls/ole32/storage32.c
    <li>dlls/ole32/hglobalstream.c
    <li>dlls/ole32/antimoniker.c
    <li>dlls/ole32/filemoniker.c
    <li>dlls/ole32/bindctx.c
    <li>dlls/ole32/oleproxy.c
    <li>dlls/ole32/clipboard.c
    <li>dlls/ole32/memlockbytes.c
    <li>dlls/ole32/memlockbytes16.c
    <li>dlls/ole32/itemmoniker.c
    <li>dlls/ole32/moniker.c
    <li>dlls/ole32/compositemoniker.c
    <li>dlls/ole32/marshal.c
    <li>dlls/ole32/rpc.c
    <li>dlls/dinput/mouse.c
    <li>dlls/dinput/joystick_linux.c
    <li>dlls/dinput/device.c
    <li>dlls/dinput/joystick_linuxinput.c
    <li>dlls/dinput/keyboard.c
    <li>dlls/urlmon/umon.c
  </ul>

  <h3>IClassFactory->CreateInstance aggregation check</h3>

  The CreateInstance method of IClassFactory takes pUnkOuter as the second
  member. This parameter must be null unless the class supports aggregation,
  which many don't.  If the object the class factory creates doesn't support
  aggregation, pUnkOuter should be checked to make it is NULL.<p>

  This usually means adding code like the following at the top of the
  factory's CreateInstance method:
<pre>
   if( pUnkOuter )
      return CLASS_E_NOAGGREGATION;
</pre>
  <p>

  There appears to be quite a few COM object in which that is not done.<p>
  
  <h3>Implement DllCanUnloadNow and IClassFactory->LockServer</h3>

  COM objects that support activation as in-proc servers are implemented as
  DLLs.  The COM specifies that these DLLs should provide an entry point
  named DllCanUnloadNow which returns true or false depending on whether
  the DLL is still in use or not.  Many of Wine's COM objects stub that
  entrypoint to return TRUE always.<p>

  To implement DllCanUnloadNow, a counter should be created to keep track of
  the number of active objects that use the DLL's code.  Additionally
  LockServer(TRUE) should increment that counter by one and LockServer(FALSE)
  should decrement it by one.<p>

  DLLs that appear to have this problem:
  <ul>
    <li>dlls/dmcompos/dmcompos_main.c
    <li>dlls/dmusic/dmusic_main.c
    <li>dlls/dmsynth/dmsynth_main.c
    <li>dlls/dmband/dmband_main.c
    <li>dlls/dswave/dswave_main.c
    <li>dlls/dxdiagn/dxdiag_main.c
    <li>dlls/msi/msi.c
    <li>dlls/itss/itss.c
    <li>dlls/olepro32/olepro32stubs.c
    <li>dlls/dmime/dmime_main.c
    <li>dlls/oleaut32/oleaut.c
    <li>dlls/dpnhpast/main.c
    <li>dlls/mlang/mlang.c
    <li>dlls/dmscript/dmscript_main.c
    <li>dlls/dsound/dsound_main.c
    <li>dlls/dinput8/dinput8_main.c
    <li>dlls/shdocvw/shdocvw_main.c
    <li>dlls/dinput/dinput_main.c
    <li>dlls/mpr/mpr_main.c
    <li>dlls/urlmon/urlmon_main.c
    <li>dlls/shell32/shell32_main.c
    <li>dlls/ddraw/main.c
    <li>dlls/dmstyle/dmstyle_main.c
  </ul>

  <h2>Tools</h2>

  <h3>Smatch</h3>
  From <a href="mailto:mstefani@redhat.com">Michael Stefaniuc</a>: <br>
  Smatch (<a href="http://smatch.sourceforge.net/">smatch.sourceforge.net</a>)
  is basically a patch to gcc-3.1.1 that makes gcc dump out its
  internal representation of the code and a set of perl modules/scripts to
  ease the parsing of the dumped code. Most of the perl scripts are for
  the Linux Kernel but writing new scripts seems to be easy. I wrote
  (well, mostly adapted an existing script for the kernel) 
  <a href="http://people.redhat.com/mstefani/wine/smatch/">one script</a>
  (if we decide to adopt smatch it should probably go to <tt>$wine/tools/smatch/</tt>)
  to find code paths with missing <tt>LeaveCriticalSection</tt>'s. Scripts to find
  some other useful things like fd, DC, GDI obejects leaks should be easy to write.
  <p><strong>Update</strong>:<br>
  There's a new <a href="http://people.redhat.com/mstefani/wine/smatch/">web page</a> 
  about Wine and Smatch. It includes also a table with the bugs found by the smatch 
  scripts. I could need a hand with the bugs (status BUG, UNKNOWN) cause I don't know
  how to fix them correctly (and for some locking BUG's I am not sure that they are 
  real bugs).

  <h2>Cross-calls that are Just Wrong (TM)</h2>
  The inspiration for the next two projects comes from our
  Perl hacker extraordinaire, <a href="mailto:ps@leissner.se">Patrik 
  Stridvall</a>.  More to the point, a while ago Dimi asked him,
  "<i>...what would it take to add checks for calls to 16bit funcs from 32bit 
  funcs, and from Unicode funcs to ANSI funcs?</i>"
  He promptly replied: "<i>It is already done. Years ago. :-)</i>"

  <h3>Get rid of W->A calls</h3>
  We should not call ASCII functions from Unicode functions. 
  The ASCII to Unicode conversion is lossy; moreover, with the
  shift to Unicode, it's actually slower to deal in ASCII than
  in Unicode, because of the additional conversions required.
  There are 54 cross calls from Unicode to ANSI as reported by
  <tt>tools/winapi_check/winapi_check --none --progress --cross-call-unicode-ascii</tt>
  (as of Aug 12, 2004):
  <ul>
    <li class=submitted>dlls/advapi32/crypt.c: advapi32: CryptAcquireContextW: illegal call to CryptAcquireContextA
    <li class=submitted>dlls/advapi32/crypt.c: advapi32: CryptEnumProviderTypesW: illegal call to CryptEnumProviderTypesA
    <li class=committed>dlls/advapi32/crypt.c: advapi32: CryptEnumProvidersW: illegal call to CryptEnumProvidersA
    <li class=submitted>dlls/advapi32/crypt.c: advapi32: CryptGetDefaultProviderW: illegal call to CryptGetDefaultProviderA
    <li class=submitted>dlls/advapi32/crypt.c: advapi32: CryptSetProviderExW: illegal call to CryptSetProviderExA
    <li>dlls/ddraw/main.c: ddraw: DirectDrawEnumerateExW: illegal call to DirectDrawEnumerateExA
    <li>dlls/gdi/printdrv.c: gdi32: StartDocW: illegal call to HEAP_strdupWtoA
    <li>dlls/gdi/printdrv.c: gdi32: StartDocW: illegal call to StartDocA
    <li>dlls/kernel/comm.c: kernel32: CommConfigDialogW: illegal call to CommConfigDialogA
    <li>dlls/kernel/comm.c: kernel32: CommConfigDialogW: illegal call to HEAP_strdupWtoA
    <li>dlls/kernel/comm.c: kernel32: SetDefaultCommConfigW: illegal call to HEAP_strdupWtoA
    <li>dlls/kernel/comm.c: kernel32: SetDefaultCommConfigW: illegal call to SetDefaultCommConfigA
    <li>dlls/kernel/locale.c: kernel32: GetLocaleInfoW: illegal call to GetModuleHandleA
    <li>dlls/kernel/sync.c: kernel32: WaitNamedPipeW: illegal call to CreateEventA
    <li>dlls/lzexpand/lzexpand_main.c: lz32: LZOpenFileW: illegal call to LZOpenFileA
    <li>dlls/rpcrt4/rpc_binding.c: rpcrt4: RpcBindingToStringBindingW: illegal call to RpcBindingToStringBindingA
    <li>dlls/rpcrt4/rpc_binding.c: rpcrt4: RpcBindingToStringBindingW: illegal call to RpcStringFreeA
    <li>dlls/rpcrt4/rpc_server.c: rpcrt4: RpcServerUseProtseqEpExW: illegal call to RPCRT4_strdupWtoA
    <li>dlls/shell32/shell32_main.c: shell32: ShellAboutW: illegal call to DialogBoxIndirectParamA
    <li>dlls/shell32/shell32_main.c: shell32: ShellAboutW: illegal call to HEAP_strdupWtoA
    <li>dlls/shell32/shell32_main.c: shell32: ShellAboutW: illegal call to LoadIconA
    <li>dlls/shell32/shellole.c: shell32: DragQueryFileW: illegal call to DragQueryFileA
    <li>dlls/shell32/systray.c: shell32: Shell_NotifyIconW: illegal call to Shell_NotifyIconA
    <li>dlls/shlwapi/string.c: shlwapi: StrCmpLogicalW: illegal call to SHLWAPI_ChrCmpHelperA
    <li>dlls/shlwapi/string.c: shlwapi: StrFormatByteSizeW: illegal call to StrFormatByteSize64A
    <li>dlls/shlwapi/string.c: shlwapi: StrRetToStrW: illegal call to SHStrDupA
    <li>dlls/version/install.c: version: VerInstallFileW: illegal call to VerInstallFileA
    <li>dlls/winmm/driver.c: winmm: OpenDriverW: illegal call to OpenDriverA
    <li>dlls/winmm/joystick.c: winmm: joyGetDevCapsW: illegal call to joyGetDevCapsA
    <li>dlls/winmm/mci.c: winmm: mciSendStringW: illegal call to mciSendStringA
    <li>dlls/winmm/mmio.c: winmm: mmioRenameW: illegal call to mmioRenameA
    <li>dlls/winmm/mmio.c: winmm: mmioStringToFOURCCW: illegal call to mmioStringToFOURCCA
    <li>dlls/winmm/winmm.c: winmm: auxGetDevCapsW: illegal call to auxGetDevCapsA
    <li>dlls/winmm/winmm.c: winmm: mciGetErrorStringW: illegal call to mciGetErrorStringA
    <li>dlls/winmm/winmm.c: winmm: midiInGetDevCapsW: illegal call to midiInGetDevCapsA
    <li>dlls/winmm/winmm.c: winmm: midiOutGetDevCapsW: illegal call to midiOutGetDevCapsA
    <li>dlls/winmm/winmm.c: winmm: mixerGetControlDetailsW: illegal call to mixerGetControlDetailsA
    <li>dlls/winmm/winmm.c: winmm: mixerGetDevCapsW: illegal call to mixerGetDevCapsA
    <li>dlls/winmm/winmm.c: winmm: mixerGetLineControlsW: illegal call to mixerGetLineControlsA
    <li>dlls/winmm/winmm.c: winmm: mixerGetLineInfoW: illegal call to mixerGetLineInfoA
    <li>dlls/winmm/winmm.c: winmm: waveInGetDevCapsW: illegal call to waveInGetDevCapsA
    <li>dlls/winmm/winmm.c: winmm: waveOutGetDevCapsW: illegal call to waveOutGetDevCapsA
    <li>dlls/winspool/info.c: winspool.drv: AddPrinterW: illegal call to DEVMODEdupWtoA
    <li>dlls/winspool/info.c: winspool.drv: AddPrinterW: illegal call to RegSetValueExA
    <li>dlls/winspool/info.c: winspool.drv: DeviceCapabilitiesW: illegal call to DEVMODEdupWtoA
    <li>dlls/winspool/info.c: winspool.drv: DeviceCapabilitiesW: illegal call to DeviceCapabilitiesA
    <li>dlls/winspool/info.c: winspool.drv: DeviceCapabilitiesW: illegal call to HEAP_strdupWtoA
    <li>dlls/winspool/info.c: winspool.drv: DocumentPropertiesW: illegal call to DEVMODEdupWtoA
    <li>dlls/winspool/info.c: winspool.drv: DocumentPropertiesW: illegal call to DocumentPropertiesA
    <li>dlls/winspool/info.c: winspool.drv: DocumentPropertiesW: illegal call to HEAP_strdupWtoA
    <li>windows/clipboard.c: user32: GetClipboardFormatNameW: illegal call to GetClipboardFormatNameA
    <li>windows/clipboard.c: user32: RegisterClipboardFormatW: illegal call to HEAP_strdupWtoA
    <li>windows/clipboard.c: user32: RegisterClipboardFormatW: illegal call to RegisterClipboardFormatA
    <li>windows/winhelp.c: user32: WinHelpW: illegal call to WinHelpA
    <li>windows/winproc.c: user32: CallWindowProcW: illegal call to WINPROC_CallProc32WTo32A
  </ul>

  <p>Please note that patches have been submitted for the <span class=submitted>italic</span> entries;
     the <span class=committed>grayed out</span> entries have already been fixed. 
  <ul>
    <li>workers: <a href="mailto:rolf.kalbermatter@citeng.com">Rolf Kalbermatter</a>,
		 <a href="nailto:Stefan.Leichter@camLine.com">Stefan Leichter</a>,
		 <a href="mailto:m.davison@virgin.net">Matthew Davison</a>,
		 <a href="mailto:tony_lambregts@telusplanet.net">Tony Lambregts</a>,
		 <a href="mailto:dmitry@codeweavers.com">Dmitry Timoshkov</a>,
		 <a href="mailto:pouech-eric@wanadoo.fr">Eric Pouech</a>,
		 <a href="mailto:julliard@winehq.org">Alexandre Julliard</a>,
		 <a href="mailto:burner1@hotmail.com">Justin Chevrier</a>,
		 <a href="mailto:ulrich@codeweavers.com">Ulrich Czekalla</a>,
		 <a href="mailto:mike@codeweavers.com">Mike McCormack</a>,
		 <a href="mailto:juan_lang@yahoo.com">Juan Lang</a>,
		 <a href="mailto:kevin@plop.org">Kevin Koltzau</a>,
		 <a href="mailto:truiken@gmail.com">James Hawkins</a>.
    <li>status: <span class=inprogress>Over half done.</span>
    <li>updated: Aug 12, 2004
  </ul>

  <h2>DLL separation</h2>
  This one is broken down into two phases:
  <dl>
    <dt>Phase 1</dt>
    <dd>DLLs make use of only the functions exported through the <tt>.spec</tt> files</dd>
    <dt>Phase 2</dt>
    <dd>Temporary hacks are eliminated out of the <tt>.spec</tt> files</dd>
  </dl>

  <h3>Phase 1</h3>
  Please refer to the 
  <a href="http://www.winehq.org/site/todo_lists">0.9 TODO</a>
  for the status of this project.

  <h3>Phase 2</h3>
  A list of the functions that need attention can be found linked to
  <a href="http://bugs.winehq.org/show_bug.cgi?id=96">Bug #96</a>,
  or at the end of the <tt>.spec</tt> files.

  <a name="winedos"></a><h3>WineDOS</h3>
  Separate MSDOS support from kernel/ntdll into winedos. This task is
  tracked by <a href="http://bugs.winehq.org/show_bug.cgi?id=546">Bug #546</a>.
  <ul>
    <li>worker: <a href="mailto:jhei@iki.fi">Jukka Heinonen</a>,
    <li>status: <span class=inprogress>lots of patches submitted</span>
    <li>updated: Jan 29, 2003
  </ul>

  <h2>Stick to the Win32 API</h2>
  There are <em>many</em> reasons why we should use the Win32 API as much
  as possible inside Wine, rather than our own, ad-hoc API. Here are a few:
  <ul>
    <li>The Win32 API is documented, and understood by many people
    <li>It is <em>always</em> available, so introducing additional APIs only increases confusion
    <li>The Win32 API get a lot more testing, as it is now used a lot more
  </ul>
  This can go on, and on, but I think the point is clear. The following tasks
  fall into this category.

  <h3>Getting rid of the global 
      <font size="-1"><tt>HEAP_strdupWtoA</tt></font> function</h3>
  As of Dec 4, 2002, there were 98 occurrences of <tt>HEAP_strdupWtoA</tt>.
  These functions invocations should go away during the W -&gt; A cross-call
  cleanup. It is better to directly fix that sort of cross call, rather than
  replace this function by other alternatives. The few of them that can not
  be eliminated this way, should be replaced by calls to <tt>WideCharToMultiByte</tt>.

  <h3>Include file cleanup</h3>
  That is, no more Wine-specific headers in <tt>include/</tt>. This is tightly
  related to the <b>DLL Separation</b> task, listed above. There are 16 Wine-only
  headers that need to be moved, as of Aug 12, 2004:
  <ul>
    <li> async.h
    <li> builtin16.h
    <li> cursoricon.h
    <li> dce.h
    <li> dciddi.h
    <li> gdi.h
    <li> heap.h
    <li> local.h
    <li> miscemu.h
    <li> module.h
    <li> nonclient.h
    <li> stackframe.h
    <li> thread.h
    <li> user.h
    <li> win.h
    <li> winpos.h
  </ul>
  <ul>
    <li>workers: <a href="mailto:julliard@winehq.org">Alexandre Julliard</a>.
    <li>status: <span class=inprogress>first patches committed.</span>
    <li>updated: Dec 6, 2002
  </ul>

  <h3>Remove non-standard directories</h3>
  There are 15 directories that do not fit into the current organization. 
  They are historical remnants of a troubled past, they need to go. 
  This is tightly linked to the <b>DLL Separation</b> task, listed above.
  <ul>
    <li> controls
    <li> misc
    <li> windows
  </ul>
  <ul>
    <li>workers: <a href="mailto:julliard@winehq.org">Alexandre Julliard</a>.
    <li>status: <span class=inprogress>first patches committed.</span>
    <li>updated: Mar 10, 2004
  </ul>

  <h3>Compile Wine with other headers</h3>
  We have at least two other Win32 headers available: MSVC, and MinGW (w32api).
  In a perfect world, we should be able to build Wine using either of them.
  This will be a <i>very</i> effective way of discovering problems in our own
  headers, as the compiler will signal mismatches in function signatures, etc.
  <ul>
    <li>workers: <a href="mailto:steven_ed4153@yahoo.com">Steven Edwards</a>.
    <li>status: <span class=inprogress>first patches committed.</span>
    <li>updated: Aug 30, 2003
  </ul>

 <h2>Miscellaneous</h2>

  <h3>Use Compiler Warnings to Fix Errors</h3>
  Having gcc print out some warnings could isolate some problems.  There are 
  at least three different ones that we should investigate:
  <ul>

     <li> <tt>-Wmissing-declarations</tt>
     should point lots of missing APIs declarations 
     (Eric has done it in some cases, and is in the process of submitting some 
     fixes). We cannot turn this warning always on because there are lots of 
     cases where we have global functions without prototypes (more than 2/3 
     of them are made out of the 16bit entry points)</li>
   
     <li><tt>-Wwrite-strings</tt>
     There has already been quite some work on this, but we think there's 
     more to do.</li>

     <li> <tt>-Wcast-qual</tt>
     should point out all the (const bla*) => (foo*) casts. We 
     use quite a bit this, and in some cases it would prevent some errors. 
     These are the main cases pointed out by this warning:
      <ol>
       <li> const void* ptr; and then reading a value from ptr (word...) like 
       *(WORD*)ptr which should be written *(const WORD*). The warning in this 
        case is harmless.</li>

       <li> const void* ptr; and then setting it to another const pointer: const
       WORD* pw = (WORD*)ptr; which should be written pw = (const WORD*)ptr;. 
       This warning is harmless if pw is really defined as const, in some cases 
       it isn't and this should be fixed.</li>

       <li> const void* ptr; and then setting it to a pointer to a pointer (used
       a lot for qsort/bsearch... callbacks), when dealing with arrays of 
       pointers. Here again, what's const is the first pointer, so const foo* f 
       = *(const foo**)ptr is wrong, it should be const foo* f = (const foo* 
       const*)ptr; This could be harmfull if not declared properly.
       Unfortunately, we cannot turn this warning on all the time because some 
       C functions implementation would always trigger it (strstr for example), 
       unless we use intergral values (not pointer) to cast from the const 
       char* to the returned char*), and this is uglier IMO than the warning we 
       try to avoid.</li> </ol> </li>

     <li><tt>-Wsign-compare</tt>
     Turns up a load of warnings, most of which can be fixed by choosing
     correct variable types.</li>
  </ul> 

  <p>This project was suggested by Eric Pouech and Francois Gouget.  
     For more information <a href="/site/who">contact</a> them directly or 
     the wine-devel <a href="/site/forums">mailing list</a>.
  <ul>
  <li> workers: <a href="mailto:hans@it.vu.nl">Hans Leidekker</a> (on -Wsign-compare)
  <li> status: <span class=todo>TODO</span>
  <li> updated: May 21, 2004</ul>


 
  <h3>Fix min/max macros</h3>
  <p>From Francois Gouget: <i>"Patch our min/max macros to catch 
    signed/unsigned comparisons.  This generates a lot of warnings. Ideally 
    they should be fixed without using casts but it may not always be possible.
    (the modified min/max macros where borrowed from a Linux kernel patch)"</i>
    <ul>
    <li> workers: wanted
    <li> status: <span class=todo>TODO</span>
    <li> updated: May 21, 2004</ul>



  <h3><a name="dprintf"></a>Replace DPRINTFs with TRACEs where possible</h3>
  Currently, the debug layer is smart enough to concatenate consecutive
  <tt>TRACE</tt> statements if they don't end with a new line. As such,
  we can replace most <tt>DPRINTF</tt> statements with <tt>TRACE</tt>s.
  The conversion is mostly mechanical, but must be checked manually
  to watch for potential simplifications that may be possible with the
  new scheme.
  <ul class=modified>
    <li>workers: <a href="mailto:tony_lambregts@telusplanet.net">Tony Lambregts</a>
    <li>status: <span class=inprogress>first patches already submitted</span>
    <li>updated: Mar 14, 2003
  </ul>


  <h3><a name="crt0"></a>Make winegcc link automatically to a main() or a WinMain()</h3>
  From Alexandre: <i>The easiest is with some sort of crt0 static library that provides 
  main() if it's missing; you have a main() that basically calls WinMain(), compiled 
  inside a .a library. At link time if you have a main() already the linker doesn't use 
  the .a, otherwise it uses it. crt0 is the default C startup code, currently we generate 
  it inside the spec file directly but it would be cleaner to have a separate crt0.o file;
  it's also needed if we want full msvcrt compatibility. We need at least a crt0.o to call 
  main(), and another .o providing the default main(). There may also be a need to handle 
  msvcrt specially (i.e. link another .a in msvcrt mode), so that we call exit() when
  linked to msvcrt instead of calling ExitProcess() as we normally do.</i><br>
  From Dimi: <i>So, let's say we'll create a winecrt0-glibc.a and a winecrt0-msvcrt.a, 
  and in winegcc we assume that they are there, so we can just list the appropriate one
  as the last element on the linker command line.</i>
  <ul>
    <li>workers: wanted
    <li>status: <span class=todo>TODO</span>.
    <li>updated: Aug 7, 2004
  </ul>

  <h3><a name=tests></a>Fix the conformance tests so that they pass on Windows</h3>
  Entry submitted by <a href="mailto:fgouget@free.fr">Francois Gouget</a>.

   <li> Volunteers who will run the tests their Windows platform of choice on a 
        regular basis so that we quickly fix incorrect tests
     <ul>
	<li> Win95: <a href="mailto:mstefani@redhat.de">Michael Stefaniuc</a>,
		    <a href="mailto:Cenedese@indel.ch">Fabian Cenedese</a>
	<li> Win98: <a href="mailto:tony_lambregts@telusplanet.net">Tony Lambregts</a>,
		    <a href="mailto:whydoubt@hotmail.com">Jeff Smith</a> (SE)
	<li> WinNT: <a href="mailto:stras@ecf.toronto.edu">Luke Stras</a>
	<li> WinME: <a href="mailto:whiting@MIT.EDU">James K Whiting</a>
	<li> Win2k: <a href="mailto:twickline2@skybest.com">Tom Wickline</a>,
		    <a href="mailto:kyethespy@liquid2k.com">Kye Lewis</a>
	<li> WinXP: <a href="mailto:compsol@ptd.net">David Miller</a>, 
		    <a href="mailto:kyethespy@liquid2k.com">Kye Lewis</a>
     </ul>
  </ol>

  <h2>Completed Projects</h2>

  <p>Several janitorial projects have been completed in the past and we'd
  like to thank everyone who pitched in.  Just in case you're wondering
  what we've done, the list is preserved below:

  <h3>Compilation with -DSTRICT</h3>
  Please refer to <a href="http://bugs.winehq.org/show_bug.cgi?id=90">Bug 
  #90</a> for more information on this project. 
  <ul>
    <li>workers: Michael Stefaniuc, Andrew John Hughes, Johan Dahlin,
		 Alexandre Julliard
    <li>completed: <span class="done">Nov 22, 2002</span>
  </ul>

  <h3>Get rid of 32-&gt;16 calls</h3>
  We should not call 16 bit from 32 bit code. With the ongoing 16-bit
  separation, this is even more so important. 
  <ul>
    <li>workers: Andrew John Hughes
    <li>completed: <span class="done">Jan 31, 2003</span>
  </ul>

  <h3><a name="include-quotes"></a>Include statements should use &lt;&gt; instead of ""</h3>
  Wine uses "" in most of it <tt>#include</tt> statements for historical
  reasons that are no longer an issue. It needs to be changed to use
  &lt;&gt; instead. We will keep the quotes in the .c-files, as an indication
  that the header is a Wine header, rather than a system header. For header
  files we don't have this luxury as they can cause problems for Winelib developpers.
  <ul class=modified>
    <li>workers:  Dimitrie O. Paun
    <li>completed: <span class="done">Aug 30, 2003</span>
  </ul>

  <h3>Header dependencies cleanup</h3>
  From Alexandre: <i>...most of our headers are including way
  too much stuff compared to what Windows does. It should be possible to
  generate a dependency tree of our headers with makedep and compare
  that with one done with the Windows headers; the goal is to make them
  identical.</i>
  <ul>
    <li>workers: Alexandre Julliard
    <li>completed: <span class="done">Sep 9, 2003</span>
  </ul>

  <h4><tt>HEAP_strdupAtoW</tt></h4>
  These should be changed to <tt>MultiByteToWideChar</tt>,
  or even better to <tt>RtlCreateUnicodeStringFromAsciiz</tt>.
  <ul>
    <li>workers: Matthew Davison
    <li>completed: <span class="done">Jan 27, 2003</span>
  </ul>

  <h3>Fix HeapReAlloc/RtlReAllocateHeap() calls</h3>
  From Eric: <i>there's lot of code which relies on HeapReAlloc would allocate 
  a block if the block to reallocate is NULL (as realloc does in stdlib);
  this is not the case in windows, and we should fix it (and first, fix 
  all the wine code relying on this)</i>
  <ul>
    <li>workers: Oleg Prokhorov
		 Dimitrie O. Paun
    <li>completed: <span class="done">Mar 10, 2004</span>
  </ul>

<p>&nbsp;</p>
