<!--TITLE:[Mitarbeit an Wine]-->
<!--BLURB:[Wir würden uns sehr über Deine Hilfe freuen!]-->

<h1 class="title">Mitarbeit an Wine</h1>

<p>Man ist schnell etwas überwältigt, wenn man neu bei Wine ist. Ja, es gibt viele Dinge
  zu tun, aber wo fängst Du am besten an? Gibt es etwas Leichtes, mit dem Du loslegen kannst?
  Gibt es etwas, das nicht detaillierteste Kenntnisse des Windows API und der Wine-Interna verlangt?
  Was, wenn Du C nicht kennst? Oder wenn Du gar kein Programmierer bist?</p>
<p>Nun, hier sind ein paar Projekte, die Dir einen Einstieg geben könnten. Bitte beachte, dass
  diese Übersicht keine offizielle Ansage ist, was an Wine getan werden sollte. Es ist einfach
  eine Liste von Dingen, die wichtig und nützlich sind. In jedem Fall freuen wir uns über
  Deine Rückmeldung. Ebenso lass uns bitte wissen, wenn Dir ein Projekt einfällt, das wir
  zu dieser Übersicht hinzufügen sollten.</p>
<p>Viele Projekte können sogar durchgeführt werden, wenn Du kein C Programmierer bist oder
  Du keine detaillierten Kenntenisse der Windows-Interna hast. Gib uns Bescheid, wenn Du Interesse
  hast, ein bestimmtes Projekt anzugehen.</p>
<p>Hier sind ein paar Anhaltspunkte, die Dir helfen, loszulegen:</p>

<ol type="A">
  <li><a href="#web_site">Allgemeine Arbeiten</a>
    <ol>
      <li><a href="http://wiki.winehq.org/CreateFonts">Erstelle Fonts</a></li>
      <li><a href="#draw">Zeichne Icons für Wine</a></li>
      <li><a href="#app_owners">Werde verantwortlich für eine Anwendung</a></li>
      <li><a href="#support">Fehlersuche und Unterstützung</a></li>
    </ol>
  </li>
  <li><a href="#devel">Entwicklung</a>
    <ol>
      <li><a href="#devel_task">Einige Entwicklungsaufgaben</a></li>
      <li><a href="#conf_tests">Konformitätstests</a></li>
      <li><a href="#doc_win_api">Dokumentation der Windows API Funktionen</a></li>
      <li><a href="#port_app">Portiere Deine Windows-Anwendung auf Wine</a></li>
      <li><a href="#code_review">Führe einen fokussierten Code Review durch</a></li>
    </ol>
  </li>
  <li><a href="#misc">Sonstiges</a>
    <ol>
      <li><a href="#doc">Schreiben von Dokumentation</a></li>
      <li><a href="#localized">Lokalisierungsarbeit</a></li>
      <li><a href="#pr_">Public Relations</a></li>
      <li><a href="#wpf">Spenden</a></li>
    </ol>
  </li>
</ol>

<h3 id="draw">Zeichne Icons für Wine</h3>

<p>Wegen des Copyrights kann Wine keine Windows-Icons eins zu eins übernehmen. Wir
  müssen sie also neu zeichnen und dabei ein ähnliches Design beibehalten, damit
  Anwender nicht vollkommen verloren sind. Trotzdem müssen sie unterschiedlich genug
  sein (und eventuell schöner). Du kannst dies sehen, wenn du einen Dateiauswahldialog
  öffnest.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Zeichnen</li>
  <li>Vektor Grafiken</li>
</ul>

<h3 id="app_owners">AppDB: Werde verantwortlich für eine Anwendung</h3>

<p>Ein weiterer sehr wichtiger Aspekt des Testens von Wine ist der regelmäße
  Gebrauch oder Test von echten Anwendungen und das schnellstmögliche Melden von
  Regressionsfehlern an die Wine-Entwickler. So können Regressionen früh
  entdeckt werden, während die Anzahl der Änderungen, die durchsucht werden
  müssen, noch gering und der Wine-Entwickler, der die Änderung durchgeführt
  hat, noch verfügbar ist. Ein weiterer Grund, warum <b>Deine</b> Unterstützung
  besonders wertvoll ist, ist dass die Wine-Entwickler wahrscheinlich selbst keinen
  Zugriff auf die Anwendung haben (sie können nicht alle Anwendungen kaufen) oder sie
  nicht gut genug kennen, um sie ordentlich testen zu können.</p>
<p>Du kannst sogar noch mehr helfen, in dem Du die Verantwortung für eine Anwendung
  übernimmst, das heißt dass Du den Eintrag der Anwendung in der <a
  href="http://appdb.winehq.org/">AppDB (en)</a> pflegst. Viele Anwendungen können
  zum Laufen gebracht werden (oder besser zum Laufen gebracht werden), indem einfach nur
  die richtige Kombination von nativen (Windows) und mitgelieferten (Wine) Bibliotheken
  verwendet wird. Indem du die Anwendung mit verschiedenen Kombinationen von Bibliotheken
  testest und deine Ergebnisse in dem entsprechenden Eintrag in der AppDB dokumentierst,
  hilfst du anderen Nutzern von Wine, mit der Anwendung produktiv zu sein. Damit machst
  Du Wine für eine größere Anzahl von Menschen nützlicher.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Gute Kenntnis einer bestimmten Anwendung</li>
  <li>Mit Leib und Seele dabei sein, diese Anwendung mit jeder neuen Wine Version
    zu nutzen oder testen. Es ist wichtiger, eine Anwendung regelmäßig zu
    testen, als zehn Anwendungen einmal pro Jahr.</li>
  <li>Melde alle Regressionen an wine-devel und kooperiere mit den Entwicklern, um
    das Problem zu diagnostizieren.</li>
  <li>Erstelle und pflege einen HOWTO-Bereich auf der Anwendungsseite, der alle
    Tätigkeiten zusammenfasst, die notwendig sind, um die Anwendung vernünftig
    zum Laufen zu bekommen, z.B. aus den Kommentaren der AppDB-Besucher
    zusammengetragen.</li>
  <li>Entwicklerfertigkeiten sind <strong>nicht notwendig</strong>.</li>
</ul>

<h3 id="support">Fehlersuche und Unterstützung</h3>
<p>Weil es so viele Windows-Anwendungen gibt, und weil nur sehr wenige von
  diesen perfekt funktionieren, bekommen wir viele Fragen von Anwendern,
  viele Fehlerbeschreibungen, die diagnostiziert werden müssen, und dann
  viele Fehler, die behoben werden müssen.</p>
<p>Deswegen sind Fehlerdiagnose und Unterstützung zwei eng verwandte
  Aktivitäten, die sehr wichtig für Wine sind. Wir brauchen also
  Leute, die Willens sind, die Fragen und Probleme, die in der Newsgroup, auf
  wine-users und in Bugzilla auftauchen, zu beantworten und anschließend
  zu vorzusortieren:</p>
<ul>
  <li>Generelle Wine-Probleme können meistens direkt beantwortet werden</li>
  <li>Bei anwendungsspezifischen Problemen sollte man sich an den Verantwortlichen
    für diese Anwendung wenden (falls es einen gibt), um herauszufinden, ob
    dieses Problem bekannt ist. Idealerweise werden diese Probleme in dem Eintrag
    in der AppDB aufgeführt.</li>
  <li>Andere Probleme verlangen mehr Aufwand um herauszufinden, ob das Problem
    reproduzierbar ist und ob es nur in bestimmten Umgebungen auftritt, und Log-Dateien
    zu erhalten, mit denen die Wine-Entwickler herausfinden können, woher das
    Problem kommt. Das setzt allerdings voraus, dass man eine grobe Vorstellung hat,
    woher das Problem kommen könnte, um die richtigen Debug-Einstellungen
    vorschlagen zu können. Sobald dies passiert ist, wird es viel einfacher
    für die Wine-Entwickler, die tatsächliche Ursache des Problems zu
    finden und es zu beheben. Falls ein Problem nicht schnell in der Newsgroup oder
    auf wine-users gelöst werden kann, muss eine Fehlermeldung in Bugzilla
    eingestellt werden. Durchsuche die unbestätigten und neuen Fehlermeldungen
    und bring sie für die Entwickler in eine ordentliche Verfassung. Melde Dich
    bei wine-bugs (<a href="mailto:wine-bugs@winehq.org">wine-bugs@winehq.org</a>)
    an. Diese nur-Lesen Mailingliste erhält alle Einträge von noch nicht
    zugeordneten Fehlern. Unbestätigte Fehler zu bestätigen und
    Debugging-Vorschläge zu machen sind nur einige der Tätigkeiten, die
    gemacht werden müssen.</li>
</ul>
<p>Auf Dan Kegels <a href="http://kegel.com/wine/qa/">Wine QA Project (en)</a> Website
  findest du eine Schritt für Schritt Anleitung für neue Freiwillige für
  die Wine-Qualitätssicherung.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Allgemeine Kenntnisse der Wine-Konfiguration, um Anwendern erklären zu
    können, wie sie das Window-Management von managed auf unmanaged umschalten,
    wie die FreeType-Unterstützung ausgeschaltet wird usw.</li>
  <li>Allgemeine Wissen über Wine-Probleme, dieses kann man sich hauptsächlich
    durch das Verfolgen der Mailinglisten und der Newsgroup aneignen.</li>
  <li>Wissen, wie man von nativen zu mitgelieferten Bibliotheken und umgekehrt
    umschaltet.</li>
  <li>In der Lage sein, eine Log-Datei zu analysieren, um herauszufinden, welche
    Bibliotheken von mitgeliefert zu nativ und umgekehrt gewechselt werden müssen,
    wäre ein Plus.</li>
</ul>
<p>Weitere Informationen findest du auf unserer <a href="http://wiki.winehq.org/BugzillaTriage">Fehlersichtungs Seite</a>.</p>

<h2 id="devel">Entwicklung</h2>

<h3 id="devel_task">Einige Entwicklungsaufgaben</h3>

<h3 id="conf_tests">Konformitätstests</h3>

<p>Das Ziel der Konformitätstests für Wine ist sicherzustellen, dass das Verhalten
  der Wine APIs konform zu den entsprechenden Windows APIs ist. Da es viele Windows-Versionen
  von 95 bis 7 gibt, brauchen wir sowohl Leute, die die Tests schreiben, als auch Freiwillge,
  die die Tests unter Windows ausführen. Die Test-Suite ist noch weit davon entfernt,
  komplett zu sein, aber jedes kleine Bisschen hilft.</p>
<ul>
  <li>Da sie automatisiert und regelmäßig ausgeführt werden
    können, helfen die Tests, Regressionen in Wine zu entdecken.</li>
  <li>Die Tests können vor der Implementierung von Wine Features geschrieben
    werden und helfen dem Wine-Entwickler sicherzustellen, dass seine Implementierung
    korrekt ist.</li>
  <li>Tests können sogar unter Windows von Nicht-Wine-Entwicklern geschrieben werden</li>
  <li>Tests können von Nicht-Programmierern ausgeführt werden</li>
</ul>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>C Programmierung</li>
  <li>Kenntnis der getesteten APIs</li>
  <li>Linux/Unix Kentnisse sind <strong>nicht notwendig</strong>; Konformitätstests
    können unter Windows geschrieben werden.</li>
  <li>Eine Windows-Installation zum Testen... 95, 98, 98SE, ME, NT, 2000, XP, Vista, 7</li>
  <li>Entwicklungskenntnisse sind <strong>nicht notwendig</strong>, um die Tests auszuführen.</li>
</ul>

<h3 id="doc_win_api">Dokumentation der Windows API Funktionen</h3>

<p><strong>Der Hauptgrund ist, dass MS beim Wechsel zu neuen APIs dazu tendiert, die komplette
  Dokumentation der alten (z.B. Windows 3.1) zu entfernen.</strong> Das Ziel ist, eine
  unabhängige Dokumentation des Windows APIs zu schreiben. Da wir das komplette API neu
  implementieren, wäre es eine gute Praxis, das was wir implementieren auch zu dokumentieren.
  Wir sollten uns insbesondere auf die Askpekte konzentrieren, die in der "offiziellen"
  Dokumentation nicht gut abgedeckt sind, wie z.B. Unterschiede zwischen Dokumentation und
  tatsächlichem Verhalten, Fehler, plattformspezifische Aspekte und alles das, was
  normalerweise unvollständig ist (was passiert, wenn man einen NULL Pointer übergibt,
  wenn der Puffer zu klein ist, ...) Ohne solch eine Dokumentation gibt es für neue
  Entwickler keine Möglichkeit herauszufinden, ob eine seltsame Eigenart in der
  Implementierung unbedeutend oder ein (Un-)Feature ist, auf das sich einige Programme verlassen.
  Während Wine reift werden diese Probleme wichtiger und wichtiger.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Kenntnis eines Dokumentationsgenerators für denjenigen, der versucht, die
    Generierung der Dokumentation zu vereinfachen</li>
  <li>Ein wenig C, um die APIs selbst zu dokumentieren</li>
</ul>

<h3 id="port_app">Portiere Deine Windows-Anwendung auf Wine</h3>

<p>Wenn Du selbst an einer Windows-Anwendung arbeitest, könnte eine Portierung auf Wine
  der beste Anfang sein, Code zu Wine beizutragen. Du kannst damit anfangen, zu versuchen,
  die Anwendung unter Wine laufen zu lassen und sie danach mit Wine zu kompilieren. Ich
  schlage deshalb vor, mit einer Anwendung zu beginnen, an der Du normalerweise arbeitest,
  weil du natürlich Zugriff auf den Quellcode hast. Und außerdem weißt Du,
  wie sie funktioniert, weil du sie programmierst. Darüberhinaus kannst Du Probleme von
  beiden Seiten angehen: füge Traces sowohl in Deine Anwendung als auch in Wine ein.
  Kombiniert vereinfacht es die Suche danach, was wo warum schiefläuft, sehr. Und
  da Du schon weißt, was Wine eigentlich tun sollte, bist du dann auch besser dazu
  in der Lage, den Fehler in Wine zu beheben. Alternativ kannt Du auch Beispiele aus
  Programmierlehrbüchern testen. Ein Paket, mit dem Du direkt loslegen und die
  Ergebnisse auf einer Website dokumentieren kannst, findest du
 <a href="http://fgouget.free.fr/wine/booktesting-en.shtml">hier (en)</a>.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Testen</li>
  <li>Fehlerbeschreibungen schreiben</li>
  <li>Debuggen, um die Fehler, falls möglich, zu beheben</li>
  <li>C/C++ Programmierung, falls Du versuchen willst, Programme mit den Wine Bibliotheken
    zu kompilieren</li>
</ul>

<h3 id ="code_review">Führe einen fokussierten Code Review durch</h3>

<p>Ein normaler 'allgemeiner' Code Review kann ziemlich langweilig und ineffizient sein.
  Wenn Du allerdings nach etwas speziellem suchst, kann das eine produktive Art und Weise
  sein, Fehler zu finden und zu beheben. Normalerweise fängst Du damit an, dir ein
  Thema auszusuchen. Ich habe beispielsweise einmal Code gefunden, der strncpy verwendet
  hat, ohne sicherzustellen, dass das Ergebnis mit '\0' abschließt. Meistens
  verbessert man dann nur den Code an dieser Stelle und macht dann mit anderen Sachen weiter.
  Aber wieviele ähnliche schwer zu findene Fehler würde das an anderen Stellen
  bestehen lassen? Also traf ich die Entscheidung, alle Verwendungen von strncpy
  zu überprüfen. Das kann einige Zeit kosten und so nicht immer möglich sein
  (schreib mir falls Du einen speziellen Fehler im Auge, aber keine Zeit dafür hast).
  Auf jeden Fall ist es eine nette Weise, sich in den Code hineinzufinden und Du kannst
  Fehler finden, ohne monatelange Erfahrung mit Wines Code zu brauchen.</p>
<p>Sei allerdings vorgewarnt, dass deine Änderungen von vielen Entwicklern kritisch
  durchleuchtet werden, da sie über viele Bereiche verteilt sein werden. Da deine
  Änderungen außerdem wahrscheinlich keine offensichtlichen Fehlerbehebungen
  sein werden, kannst du auf (begründeten) Widerstand treffen. Stell sicher, dass
  deine Änderungen tatsächlich einen Fehler beheben und nicht einfach nur ein
  Problem unter den Teppich kehren (insbesondere, wenn es sich um Compiler-Warnungen
  handelt). Kosmetische Verbesserungen oder unnötige Änderungen sind generell
  nicht willkommen (aber ich gebe zu, dass es manchmal schwer ist, zu widerstehen).</p>
<p><strong>Hier sind einige Vorschläge:</strong></p>
<ul>
  <li>Arrays fester Größe wie 'foo[100]'. Woher kommt 100?</li>
  <li>Arrays mit einer Größe von 255, 256, 512 oder 1024. Das sind aller
    Wahrscheinlichkeit nach Variablen, die einen Pfad beinhalten sollen. Dann sollten
    sie allerdings eins der Standard-Macros wie z.B. MAX_PATH, MAX_PATHNAME_LEN oder so
    verwenden. Welches?</li>
  <li>Aufrufe von sprintf mit falscher Buffer-Größe</li>
  <li>Ineffiziente Verwendung von strcat (nicht wirklich ein Fehler und nicht wirklich
    überlebensnotwendig)</li>
</ul>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>C-Programmierung</li>
</ul>

<h2 id="misc">Sonstiges</h2>

<h3 id="doc">Schreiben von Dokumentation</h3>

<p>Wine hat einen ständigen Bedarf an Aktualisierungen der Dokumentation. Wine
  hat seine "<a href="{$root}/site/documentation">Anleitungen (en)</a>", wie den Wine User
  Guide etc. Die SGML-Quellen der Anleitungen befinden sich in einem
  <a href="http://source.winehq.org/git/docs.git/">separate Git Zweig</a>.</p>
<p>Weitere wichtige Dokumentationen sind die README Datei und die man pages und
  anderen Dateien im documentation Verzeichnis.</p>
<p>Deine Aufgabe wäre es sicherzustellen, dass jeder Patch, der von einem
  Entwickler beigetragen wird, der das Konfigurationsverhalten von Wine irgendwie
  ändert, so schnell wie möglich ordentlich dokumentiert wird. Dazu
  müsstest Du neue Funktionalitäten testen und eventuell auch die
  Entwickler fragen, was ihr Patch im Einzelnen macht (und vergiss nicht, den
  Entwicklern einen zu verpassen, die die Arbeitsweise ihres Patches überhaupt
  nicht dokumentiert haben!).</p>
<p>Die Aktualisierung der Dokumentation findet statt, in dem Du "Git Diffs" der
  entsprechenden Dateien an wine-patches schickst.</p>

<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Vorzugsweise relativ gutes Verständnis von Programmierung und Wine</li>
  <li>Vorzugsweise sicherer Umgang mit SGML/DocBook und den entsprechenden Tools</li>
  <li>Durchhaltevermögen (ständige Änderungen!)</li>
</ul>

<h3 id="localized">Lokalisierungsarbeit</h3>

<p>Des weiteren brauchen wir lokalisierte Versionen der Wine Guides und
  man pages. Dafür brauchen wir viele Helfer, die Willens sind,
  Änderungen an der englischen Dokumentation in Fremdsprachen zu
  übersetzen. Falls Du uns mit einer bestimmten Sprache helfen willst,
  dann melde Dich bitte bei uns dafür an!</p>
<p>Momentan suchen wir Helfer für folgende Übersetzungen:</p>
<ul>
  <li>Die README Datei inkl. weiterer Pflege der Übersetzung</li>
  <li>Die Wine Ressource Dateien und Meldungen, die Wine ausgibt (aber natürlich
    nicht die Debug-Meldungen). Mittels der <a href="http://source.winehq.org/transl/">Wine-Übersetzungsstatistik</a> kannst Du für Deine Sprache überprüfen, wieviel es dort zu tun gibt.</li>
</ul>
<p>Wir brauchen außerdem ein "QuickStart/Howto" Dokument, das grundlegende Hilfe
  für die Installation und Konfiguration von Wine mit etwas mehr Details als die
  README-Datei gibt, aber gleichzeitig viel kürzer als der Wine User Guide ist
  (könnte auch ein Kapitel dieser Anleitung sein). Dieses Dokument müsste dann
  in mehrere Sprachen übersetzt werden, was es zumindest etwas einfacher für
  Anwender, die kein Englisch sprechen, machen würde, Wine zu installieren und
  einzurichten.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Vorzugsweise relativ gutes Verständnis von Programmierung und Wine</li>
  <li>Vorzugsweise sicherer Umgang mit SGML/DocBook und den entsprechenden Tools</li>
  <li>Durchhaltevermögen (ständige Änderungen!)</li>
  <li>Sprachfertigkeit</li>
</ul>

<h3 id="pr_">Public Relations</h3> 

<p>Momentan haben wir fast gar kein Public Relationship Management. Das sollte sich
  verbessern.</p>
<p>Die einzige Form von PR, die wir momentan haben, läuft auf "Eulen nach Athen
  tragen" hinaus, da wir nur Artikel auf IT Websites haben (die allermeisten befassen sich
  ausschließlich mit Linux!). Wir sollten eine viel breitere Berichterstattung
  auf den traditionellen, eher Windows-lastigen Websites haben, und, am wichtigsten, in
  Zeitungen, um der Allgemeinheit Erleuchtung zu bringen!</p>
<p>Daher ginge bei dieser Arbeit darum, Artikel zu schreiben, die sowohl in regionalen
  als auch überregionalen Zeitungen und Online Publikationen erscheinen sollen.</p>
<p>Benötigte Fertigkeiten/Kenntnisse:</p>
<ul>
  <li>Einigermaßen erfahrener Wine-Anwender</li>
  <li>Willens, Wine auf LUG-Treffen, Computermessen und ähnlichen Veranstaltungen
    vorzuführen</li>
  <li>Bestehende Pressekontakte sind erwünscht aber werden auf keinen Fall
    vorausgesetzt</li>
</ul>

<h3 id="wpf">Spenden</h3>

<p>Durch die Unterstützung des Wine Party Fonds kannst du Deine
  Anerkennung der Wine Entwickler demonstrieren. Die Einnahmen werden
  für Entwickler-Treffen wie z.B. zukünftige Wine Konferenzen
  verwendet, oder in einigen Fällen, um Dokumentation zu kaufen.</p>
<p>Die Organisation <a href="http://www.sfconservancy.org/">
  Software Freedom Conservancy (en)</a> verwaltet momentan unsere Spenden.
  Falls Du Fragen hast oder sonstige Hilfestellung brauchst, besuch
  bitte die SFC Website.</p>
<p>Die Software Freedom Conservancy Organisation erfüllt die
  Anforderungen nach Artikel 501(c)(3), so dass Spenden an diese, so weit das
  Gesetz erlaubt, von der Steuer abgesetzt werden können (gilt
  für die USA).</p>

<p><strong>Möglichkeiten zu spenden:</strong></p>

<table border="0" cellpadding="10" cellspacing="1" bgcolor="#EFEFEF">
<tr bgcolor="#ffffff">
    <td align="center">
        <script type="text/javascript"> 
        function validateAmount(amount){
            if(amount.value.match( /^[0-9]+(\.([0-9]+))?$/)){
                return true;
            }else{
                alert('You must enter a valid donation.');
                amount.focus();
                return false;
            }
        }
        </script>
        <form action="https://checkout.google.com/cws/v2/Donations/622836985124940/checkoutForm" id="BB_BuyButtonForm" method="post" name="BB_BuyButtonForm" onSubmit="return validateAmount(this.item_price_1)" target="_top">
            <input name="item_name_1" type="hidden" value="Directed Donation to the Wine Project via Software Freedom Conservancy"/>
            <input name="item_description_1" type="hidden" value="A directed donation for the Wine project via the Software Freedom Conservancy"/>
            <input name="item_quantity_1" type="hidden" value="1"/>
            <input name="item_currency_1" type="hidden" value="USD"/>
            <input name="item_is_modifiable_1" type="hidden" value="true"/>
            <input name="item_min_price_1" type="hidden" value="10.0"/>
            <input name="item_max_price_1" type="hidden" value="25000.0"/>
            <input name="_charset_" type="hidden" value="utf-8"/>
            &#x24; <input id="item_price_1" name="item_price_1" onfocus="this.style.color='black'; this.value='';" size="11" style="color:grey;" type="text" value="Enter Amount"/><br />
            <input alt="Donate" src="https://checkout.google.com/buttons/donateNow.gif?merchant_id=622836985124940&amp;w=115&amp;h=50&amp;style=white&amp;variant=text&amp;loc=en_US" type="image"/>
        </form>
    </td>
    <td>über Google Checkout</td>
</tr>
<tr bgcolor="#ffffff">
    <td align="center">
        <form action="https://www.paypal.com/cgi-bin/webscr" method="post" name="PPdonateForm">
        <input type="hidden" name="cmd" value="_s-xclick">
        <input type="hidden" name="hosted_button_id" value="G9BDG2ABR7PYA">
        <input type="hidden" name="lc" value="DE">
        <input type="hidden" name="currency_code" value="EUR">
        <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
        <img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
        </form>
    </td>
    <td>über PayPal</td>
</tr>
</table>

<p>Darüberhinaus kannst Du Bargeld, Schecks oder internationale Zahlungsanweisungen
  in US Währung an untenstehende Adresse senden:</p>
<address>Wine Project<br>
Software Freedom Conservancy, Inc.<br>
137 MONTAGUE ST  STE 380<br>
Brooklyn, NY  11201-3548<br>
USA</address>
